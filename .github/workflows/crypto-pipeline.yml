name: Crypto Early Detection Pipeline

on:
  # Run every hour
  schedule:
    - cron: '0 * * * *'
  
  # Allow manual trigger
  workflow_dispatch:
    inputs:
      test_mode:
        description: 'Run in test mode (no Telegram publishing)'
        required: false
        default: 'false'
        type: boolean

jobs:
  crypto-pipeline:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm install
      
    - name: Create data directory
      run: mkdir -p data
      
    - name: Run Complete Pipeline
      env:
        # GitHub API
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
        # Telegram API (for data collection)
        TELEGRAM_API_ID: ${{ secrets.TELEGRAM_API_ID }}
        TELEGRAM_API_HASH: ${{ secrets.TELEGRAM_API_HASH }}
        TELEGRAM_PHONE: ${{ secrets.TELEGRAM_PHONE }}
        TELEGRAM_SESSION: ${{ secrets.TELEGRAM_SESSION }}
        
        # Gemini API Keys
        GEMINI_API_KEY1: ${{ secrets.GEMINI_API_KEY1 }}
        GEMINI_API_KEY2: ${{ secrets.GEMINI_API_KEY2 }}
        GEMINI_API_KEY3: ${{ secrets.GEMINI_API_KEY3 }}
        GEMINI_API_KEY4: ${{ secrets.GEMINI_API_KEY4 }}
        GEMINI_API_KEY5: ${{ secrets.GEMINI_API_KEY5 }}
        
        # Telegram Bot (for publishing)
        TG_TOKEN: ${{ secrets.TG_TOKEN }}
        TELEGRAM_CHANNEL_ID: ${{ secrets.TELEGRAM_CHANNEL_ID }}
      run: |
        if [ "${{ inputs.test_mode }}" = "true" ]; then
          echo "ðŸ§ª Test Mode: Running pipeline without Telegram publishing"
          # Set a dummy TG_TOKEN to prevent publishing
          export TG_TOKEN="test_mode"
            node complete_phase.mjs
        else
          echo "ðŸš€ Production Mode: Running full pipeline with Telegram publishing"
            node complete_phase.mjs
        fi
        
    - name: Upload results as artifacts
      uses: actions/upload-artifact@v4
      with:
        name: crypto-analysis-${{ github.run_number }}
        path: |
          data/*/daily_signals.json
          data/*/gemini_all_signals_analysis.json
          data/*/gemini_all_signals_summary.txt
          data/*/failed_telegram_messages.json
        retention-days: 7
        
    - name: Notify on failure
      if: failure()
      env:
        TG_TOKEN: ${{ secrets.TG_TOKEN }}
        TELEGRAM_CHANNEL_ID: ${{ secrets.TELEGRAM_CHANNEL_ID }}
      run: |
        curl -X POST "https://api.telegram.org/bot$TG_TOKEN/sendMessage" \
          -H "Content-Type: application/json" \
          -d '{
            "chat_id": "$TELEGRAM_CHANNEL_ID",
            "text": "ðŸš¨ Crypto Pipeline Failed\n\nRun: ${{ github.run_number }}\nTime: $(date)\nRepository: ${{ github.repository }}\n\nCheck logs for details.",
            "parse_mode": "Markdown"
          }'
