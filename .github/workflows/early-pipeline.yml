name: Crypto Early Detection Pipeline

on:
  workflow_dispatch: {}
  schedule:
    # Run every 2 hours at minute 0 UTC (reduced frequency for production)
    - cron: '0 */2 * * *'

permissions:
  contents: read

env:
  TZ: Europe/Zurich

jobs:
  run-pipeline:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history to ensure latest code

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: Install dependencies
        run: |
          npm ci --no-audit --no-fund

      - name: Verify code deployment
        run: |
          echo "🔍 Verifying latest code deployment..."
          echo "📁 Current working directory: $(pwd)"
          echo "📁 Files in sources/: $(ls -la sources/)"
          echo "📏 telegram_simple.mjs size: $(wc -c < sources/telegram_simple.mjs) bytes"
          echo "🔤 First 10 lines of telegram_simple.mjs:"
          head -10 sources/telegram_simple.mjs

      - name: Verify Phase 2 code freshness
        run: |
          echo "🔍 Git commit info:"
          git --no-pager log -1 --pretty=oneline
          echo "🔍 Checking for any lingering require( ) in repo (should be none):"
          if grep -R "require(" -n . --exclude-dir node_modules; then
            echo "❌ Found require( ) usages above"
          else
            echo "✅ No require( ) usages found"
          fi
          echo "🔤 First 40 lines of phase2/analyze_all_signals.mjs:"
          sed -n '1,40p' phase2/analyze_all_signals.mjs
          echo "🔤 First 40 lines of agents/analysis_gemini_all_signals.mjs:"
          sed -n '1,40p' agents/analysis_gemini_all_signals.mjs
          echo "🔤 First 40 lines of phase3/publish_early_detection.mjs:"
          sed -n '1,40p' phase3/publish_early_detection.mjs
          echo "🔍 Verifying Gemini model configuration:"
          grep -A 5 "candidateModels" agents/analysis_gemini_all_signals.mjs
          echo "🔍 Checking for gemini-2.0-flash-exp:"
          grep "gemini-2.0-flash-exp" agents/analysis_gemini_all_signals.mjs

      - name: Prepare Telegram session file
        env:
          TELEGRAM_SESSION: ${{ secrets.TELEGRAM_SESSION }}
        run: |
          echo "🔍 Debugging Telegram session setup..."
          echo "📏 TELEGRAM_SESSION length: ${#TELEGRAM_SESSION}"
          echo "🔤 First 50 chars: ${TELEGRAM_SESSION:0:50}"
          echo "🔤 Last 50 chars: ${TELEGRAM_SESSION: -50}"
          
          mkdir -p config
          if [ -n "$TELEGRAM_SESSION" ]; then
            echo "$TELEGRAM_SESSION" > config/telegram.session
            echo "✅ Telegram session file created"
            echo "📏 Session file size: $(wc -c < config/telegram.session) bytes"
            echo "📁 Files in config/: $(ls -la config/)"
            echo "🔤 First 50 chars: $(head -c 50 config/telegram.session)"
            echo "🔤 Last 50 chars: $(tail -c 50 config/telegram.session)"
          else
            echo "❌ TELEGRAM_SESSION is not set; Telegram collection will be skipped or fail."
            echo "📁 Creating empty session file for debugging..."
            touch config/telegram.session
          fi

      - name: Initialize trackers (if not exist)
        run: |
          echo "🔍 Checking if trackers exist..."
          mkdir -p data
          
          # Only create trackers if they don't exist
          if [ ! -f "data/analysis_tracker.json" ]; then
            echo "📝 Creating analysis_tracker.json..."
            cat > data/analysis_tracker.json << 'EOF'
          {
            "analyzed": {},
            "lastUpdated": "$(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)"
          }
          EOF
          fi
          
          if [ ! -f "data/collection_tracker.json" ]; then
            echo "📝 Creating collection_tracker.json..."
            cat > data/collection_tracker.json << 'EOF'
          {
            "collected": {},
            "lastUpdated": "$(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)"
          }
          EOF
          fi
          
          if [ ! -f "data/deduplication_tracker.json" ]; then
            echo "📝 Creating deduplication_tracker.json..."
            cat > data/deduplication_tracker.json << 'EOF'
          {
            "published": {},
            "contentHashes": {},
            "titleHashes": {},
            "lastUpdated": "$(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)"
          }
          EOF
          fi
          
          echo "✅ Trackers initialized (incremental mode)"

      - name: Run complete phase
        env:
          # Telegram bot/channel
          TG_TOKEN: ${{ secrets.TG_TOKEN }}
          TELEGRAM_CHANNEL_ID: ${{ secrets.TELEGRAM_CHANNEL_ID }}
          # Telegram client (reader) for Phase 1
          API_ID: ${{ secrets.API_ID }}
          API_HASH: ${{ secrets.API_HASH }}
          TELEGRAM_SESSION: ${{ secrets.TELEGRAM_SESSION }}
          # Gemini API keys (multi-key manager supports up to 6)
          GEMINI_API_KEY1: ${{ secrets.GEMINI_API_KEY1 }}
          GEMINI_API_KEY2: ${{ secrets.GEMINI_API_KEY2 }}
          GEMINI_API_KEY3: ${{ secrets.GEMINI_API_KEY3 }}
          GEMINI_API_KEY4: ${{ secrets.GEMINI_API_KEY4 }}
          GEMINI_API_KEY5: ${{ secrets.GEMINI_API_KEY5 }}
          GEMINI_API_KEY6: ${{ secrets.GEMINI_API_KEY6 }}
          # OpenAI (optional; if used elsewhere)
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          # GitHub token for rate limiting
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "🚀 Starting Crypto Early Detection Pipeline..."
          echo "📅 Run time: $(date)"
          echo "🔄 Running complete phase..."
          node complete_phase.mjs
          echo "✅ Pipeline completed successfully!"

      - name: Upload daily data artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pipeline-data-${{ github.run_id }}
          path: |
            data/**
            !node_modules/**
          if-no-files-found: ignore


